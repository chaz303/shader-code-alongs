#define S(a, b, t) smoothstep(a,b,t)

float N(float t){
   return fract(sin(t*3456.0)*6547.0);
}

vec4 N14(float t){
   return fract(sin(t*vec4(123.0, 1024.0, 3456.0, 9564.0))*vec4(6547.0, 345.0, 8799.0, 1564.0));
}

struct ray {
	vec3 o, d; 
};
    
    ray GetRay(vec2 uv, vec3 camPos, vec3 lookat, float zoom){
        ray a;
        a.o =camPos;
        
    	vec3 f = normalize(lookat-camPos);
        vec3 r = cross(vec3(0,1,0), f);
        vec3 u = cross(f, r);
        vec3 c = a.o + f * zoom;
        vec3 i = c + uv.x * r + uv.y * u;
        
        a.d = normalize(i-a.o);
        
        return a;
    }
vec3 ClosestPoint(ray r, vec3 p){
 	return r.o + max(0.0, dot(p-r.o, r.d))*r.d;
}

float DistRay(ray r, vec3 p){
	return length(p-ClosestPoint(r, p));   
}

float Bokeh(ray r, vec3 p, float size, float blur){
    float d = DistRay(r, p);
    
    size *= length(p);
    float c = S(size, size*(1.0-blur), d);
    c *= mix(0.7, 1.0, S(size*0.8, size, d));
    return c;
    
}

vec3 Streetlights(ray r, float t) {
	float side = step(r.d.x, 0.0);
    
    r.d.x = abs(r.d.x);
//    r.d.y = abs(r.d.y);
    float s = 1.0/10.0;
    float m = 0.0;
    
    for(float i = 0.0; i < 1.0; i+=s){
        float ti = fract(t+i+side*s*0.5);
    	vec3 p = vec3(2.0, 2.0, 100.0-ti*100.0);
    	m += Bokeh(r, p, 0.05, 0.1)*ti*ti*ti;
    }

    return vec3(1.0, 0.7, 0.3)*m;
}

vec3 Envlights(ray r, float t) {
	float side = step(r.d.x, 0.0);
    
    r.d.x = abs(r.d.x);
//    r.d.y = abs(r.d.y);
    float s = 1.0/10.0;
	
    vec3 c = vec3(0.0);
    
    for(float i = 0.0; i < 1.0; i+=s){
        float ti = fract(t+i+side*s*0.5);
        
        vec4 n = N14(i+side*100.0);
        
        float fade = ti*ti*ti;
        
        float occlusion = sin(ti*6.28*10.0*n.x)*0.5+0.5;
        
        fade = occlusion;
        
        float x = mix(2.5, 10.0, n.x);
        float y = mix(0.1, 1.5, n.y);
        
    	vec3 p = vec3(x, y, 50.0-ti*50.0);
    	
        vec3 col = n.wzy;
        c += Bokeh(r, p, 0.05, 0.1)*fade*col*0.5;
    }

    return c;
}

vec3 Headlights(ray r, float t) {
    
    t *= 2.0;

    float w1 = 0.25;
    float w2 = w1*1.2;
    float m = 0.0;
    float s = 1.0/30.0;
    
    for(float i = 0.0; i < 1.0; i+=s){
        
        float n = N(i);
        
        if(n>0.1) continue;
        
        float ti = fract(t+i);
        float z = 100.0-ti*100.0;
        float fade = ti*ti*ti*ti*ti;
        float focus = S(0.9, 1.0, ti);
        
        float size = mix(0.05, 0.03, focus);
        
    	m += Bokeh(r, vec3(-1.0-w1, 0.15, z), size, 0.1)*fade;
        m += Bokeh(r, vec3(-1.0+w1, 0.15, z), size, 0.1)*fade;
        
        m += Bokeh(r, vec3(-1.0-w2, 0.15, z), size, 0.1)*fade;
        m += Bokeh(r, vec3(-1.0+w2, 0.15, z), size, 0.1)*fade;
        
        float ref = 0.0;
        ref += Bokeh(r, vec3(-1.0-w1, -0.15, z), size*3.0, 1.0)*fade;
        ref += Bokeh(r, vec3(-1.0+w1, -0.15, z), size*3.0, 1.0)*fade;
        
        m += ref*focus;

    }

    return vec3(0.9, 0.9, 1.0)*m;
}

vec3 Taillights(ray r, float t) {

    t *= 0.25;
    
    float w1 = 0.25;
    float w2 = w1*1.2;
    float m = 0.0;
    float s = 1.0/15.0;
    
    for(float i = 0.0; i < 1.0; i+=s){
        
        float n = N(i);
        
        if(n>0.5) continue;
        
        float lane = step(0.25, n);
        
        float ti = fract(t+i);
        float z = 100.0-ti*100.0;
        float fade = ti*ti*ti*ti*ti;
        float focus = S(0.9, 1.0, ti);
        
        float size = mix(0.05, 0.03, focus);
        
        float laneShift = S(1.00, 0.96, ti);
        float x = 1.5 - lane * laneShift;
        
        float blink = step(0.0, sin(t*1000.0))*7.0*lane*step(0.96, ti);
        
    	m += Bokeh(r, vec3(x-w1, 0.15, z), size, 0.1)*fade;
        m += Bokeh(r, vec3(x+w1, 0.15, z), size, 0.1)*fade;
        
        m += Bokeh(r, vec3(x-w2, 0.15, z), size, 0.1)*fade;
        m += Bokeh(r, vec3(x+w2, 0.15, z), size, 0.1)*fade*(1.0+blink);
        
        float ref = 0.0;
        ref += Bokeh(r, vec3(x-w1, -0.15, z), size*3.0, 1.0)*fade;
        ref += Bokeh(r, vec3(x+w1, -0.15, z), size*3.0, 1.0)*fade*(1.0+blink*0.1);
        
        m += ref*focus;

    }

    return vec3(1.0, 0.1, 0.03)*m;
}

vec2 Rain(vec2 uv, float t){
    
    t *= 40.0;
        
    vec2 a = vec2(3.0, 1.0);
    vec2 st =uv*a;
    
    vec2 id = floor(st);
    st.y += t*0.22;
    
    float n = fract(sin(id.x*716.34)*768.34);
    st.y += n;
    uv.y += n;
    id = floor(st);
    st = fract(st)-0.5;
    

    t += fract(sin(id.x*76.34+id.y*1453.7)*768.34)*6.283;
    float y = -sin(t+sin(t+sin(t)*0.5))*0.43;
    vec2 p1 = vec2(0.0, y);
    vec2 o1 = (st-p1)/a;
    float d = length(o1);
            
    float m1 = S(0.07, 0.0, d);

    vec2 o2 = (fract(uv*a.x*vec2(1.0, 2.0))-0.5)/vec2(1.0, 2.0);
    d = length(o2);
    
    float m2 = S(0.3*(0.5-st.y), 0.0, d)*S(-0.1, 0.1, st.y-p1.y);
	return vec2(m1*o1*30.0+m2*o2*10.0);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord.xy / iResolution.xy;
    uv -= 0.5;
	uv.x *= iResolution.x / iResolution.y;

    vec2 m = iMouse.xy/iResolution.xy;
    float t = iTime*0.05+m.x;    

    
	vec3 camPos = vec3(0.5, 0.2, 0.0);
    vec3 lookat = vec3(0.5, 0.2, 1.0);
    
	vec2 rainDistort = Rain(uv*5.0, t)*0.5;
    rainDistort += Rain(uv*7.0, t*0.9)*0.5;
    
    uv.x += sin(uv.y*70.0)*0.0017;
    uv.y += sin(uv.y*170.0)*0.0015;

    ray r = GetRay(uv-rainDistort*0.5, camPos, lookat, 2.0);

    
    vec3 col = Streetlights(r, t);
    col += Headlights(r, t);
    col += Taillights(r, t);
    col += Envlights(r, t);

    col += (r.d.y+0.2)*vec3(0.2, 0.1, 0.5);
    
    //col = vec3(rainDistort, 0.0);
    fragColor = vec4(col, 1.0);
}
