#define S(a, b, t) smoothstep(a,b,t)

struct ray {
	vec3 o, d; 
};
    
    ray GetRay(vec2 uv, vec3 camPos, vec3 lookat, float zoom){
        ray a;
        a.o =camPos;
        
    	vec3 f = normalize(lookat-camPos);
        vec3 r = cross(vec3(0,1,0), f);
        vec3 u = cross(f, r);
        vec3 c = a.o + f * zoom;
        vec3 i = c + uv.x * r + uv.y * u;
        
        a.d = normalize(i-a.o);
        
        return a;
    }
vec3 ClosestPoint(ray r, vec3 p){
 	return r.o + max(0.0, dot(p-r.o, r.d))*r.d;
}

float DistRay(ray r, vec3 p){
	return length(p-ClosestPoint(r, p));   
}

float Bokeh(ray r, vec3 p, float size, float blur){
    float d = DistRay(r, p);
    
    float c = S(size, size*(1.0-blur), d);
    c *= mix(0.7, 1.0, S(size*0.8, size, d));
    return c;
    
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord.xy / iResolution.xy;
    uv -= 0.5;
	uv.x *= iResolution.x / iResolution.y;

	vec3 camPos = vec3(0.0, 0.2, 0.0);
    vec3 lookat = vec3(0.0, 0.2, 1.0);
    
    
    ray r = GetRay(uv, camPos, lookat, 2.0);

    vec3 p = vec3(0, 0, 5.0);

	float c = Bokeh(r, p, 0.3, 0.1);
    vec3 col = vec3(1.0, 0.7, 0.3)*c;
    
    fragColor = vec4(col, 1.0);
}
